import random

import rooms
from alice_sdk import *

schoolPhotoId = "1652229/bad8c0c5414c0417c80d"

YesAnswers = ["–¥–∞", "–∫–æ–Ω–µ—á–Ω–æ", "–∞–≥–∞", "—Å–æ–≥–ª–∞—Å–µ–Ω", "–ø—Ä–∏—Å—Ç—É–ø–∏–º", "–Ω–∞—á–Ω–µ–º", "–ø—Ä–æ–¥–æ–ª–∂–∏–º", "–æ–∫"]
NoAnswers = ["–Ω–µ—Ç", "–æ—Ç–∫–∞–∂—É—Å—å", "–Ω–µ–∞"]
EndAnswers = ["–•–≤–∞—Ç–∏—Ç", "–≤—ã—Ö–æ–¥", "–∑–∞–∫–æ–Ω—á–∏—Ç—å"]

GoodPhrases = ['–ú–æ–ª–æ–¥—á–∏–Ω–∞!üíØ –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.', '–¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –ú–µ–≥–∞–º–æ–∑–≥ü§ì', '–ú–æ–ª–æ–¥–µ—Ü!üéâ –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!', '–¢—ã —â—ë–ª–∫–∞–µ—à—å –∑–∞–¥–∞—á–∫–∏, –∫–∞–∫ –æ—Ä–µ—à–∫–∏. –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è!']
BadPhrases = ['–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.', '–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–π!', '–¢–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –Ω–∞ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.', '–≠—Ö. –¢—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è.']

EndPhrases = ["–ü—Ä–∏—è—Ç–Ω–æ –±—ã–ª–æ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å. –î–æ –≤—Å—Ç—Ä–µ—á–∏", "–£–¥–∞—á–∏ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏. –ü–æ–∫–∞."]

#—Ç—É—Ç –∑–∞–¥–∞–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–º–Ω–∞—Ç, –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–º.
rooms_variants = {
    "–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π": ["–¢–µ–±–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ—à–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞—Ö (–æ–∫—Ä—É–≥–ª—è—è –¥—Ä–æ–±–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç). –í—ã—Ä–∞–∂–µ–Ω–∏–µ: ",rooms.simpleExpressionGenerator],
    "–†–µ—à–µ–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π": ["–ó–¥–µ—Å—å —Ç–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∫–æ—Ä–Ω–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ —Å–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞—Ö, –æ—Ç–≤–µ—Ç—ã —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è —Ç–æ—á–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç —Å–∫–∞–∂–∏ '–æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç'. –£—Ä–∞–≤–Ω–µ–Ω–∏–µ: ", rooms.quadraticEquationGenerator],
    "–ü–æ–∏—Å–∫ —Ä–µ—à–µ–Ω–∏–µ –∫ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤—É": ["–†–µ—à–µ–Ω–∏–µ –∫–∞–∫–æ–≥–æ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —Ä–∏—Å—É–Ω–∫–µ", rooms.Unequation],
    "–†–µ—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π": ["–ù–∞–π–¥–∏—Ç–µ X –∏ Y —Å–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π", rooms.EquationSystem],
    "–†–µ—à–µ–Ω–∏–µ –ª–∏–Ω–µ–π–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π": ["–ù–∞–π–¥–∏—Ç–µ –∫–æ—Ä–Ω–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è", rooms.EquationSystem]
}


def handler(event, context):
    req = AliceRequest(event)

    resp = AliceResponse(req)

    if req.is_new_session:
        answers = ['–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –≤ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ. –ï—Å–ª–∏ –∂–µ–ª–∞–µ—à—å –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, —Å–∫–∞–∂–∏ "–∑–∞–∫–æ–Ω—á–∏—Ç—å". –ü—Ä–∏—Å—Ç—É–ø–∏–º?']
        resp.set_text(answers[0])
        resp.set_session_state({"stage": 1})
        resp.set_buttons([{"title": "–ü–æ–µ—Ö–∞–ª–∏!", "hide": True}, {"title": "–í—ã—Ö–æ–¥", "hide": True}])

        return resp.dictionary

    if any(y in req.command.lower() for y in EndAnswers):
        resp.set_text(random.choice(EndPhrases))
        resp.end()
        return resp.dictionary

    if req.session_state["stage"] == 1:
        if (x in req.command.lower() for x in YesAnswers):
            resp.set_text(
                "–¢—ã –æ–∫–∞–∑—ã–≤–∞–µ—à—å—Å—è –æ–¥–∏–Ω –≤ –∑–∞–∫—Ä—ã—Ç–æ–π —à–∫–æ–ª–µ. –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å—Å—è, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–π. –í –ø–æ–π–¥–µ—à—å –≤–ø—Ä–∞–≤–æ –∏–ª–∏ –≤–ª–µ–≤–æ?")

            resp.bigcard(schoolPhotoId, "–¢—ã –æ–∫–∞–∑—ã–≤–∞–µ—à—å—Å—è –æ–¥–∏–Ω –≤ –∑–∞–∫—Ä—ã—Ç–æ–π —à–∫–æ–ª–µ. ", "–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å—Å—è, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–π. –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –≤—ã–±–∏—Ä–∞—Ç—å: –∏–¥—Ç–∏ –ª–∏–±–æ –≤–ª–µ–≤–æ, –ª–∏–±–æ –≤–ø—Ä–∞–≤–æ. –ü–æ–π–¥–µ—à—å –≤–ø—Ä–∞–≤–æ –∏–ª–∏ –≤–ª–µ–≤–æ? \n–§–æ—Ç–æ –≤–∑—è—Ç–æ —Å —Å–∞–π—Ç–∞: https://klike.net/1903-shkola-krasivye-kartinki-40-foto.html")

            resp.set_session_state({"stage": 2, "leftRight": True, "think": False, "score": 0})
            resp.set_buttons([{"title": "–í–ª–µ–≤–æ", "hide": True}, {"title": "–í—ã—Ö–æ–¥", "hide": True},
                              {"title": "–í–ø—Ä–∞–≤–æ", "hide": True}])
            return resp.dictionary
        elif (x in req.command.lower() for x in NoAnswers):
            resp.set_text("–ù—É –ª–∞–¥–Ω–æ")
            resp.end()
            return resp.dictionary
        else:
            resp.set_text("–ù—É —Ç–∞–∫ –ø—Ä–∏c—Ç—É–ø–∏–º?")
            resp.set_session_state({"stage": 1})
            return resp.dictionary

    if req.session_state["stage"] >= 12:
        if req.session_state["score"] >= 5:
            resp.set_text(
                f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –Ω–∞–∫–æ–Ω–µ—Ü –≤—ã–±—Ä–∞–ª—Å—è –∏–∑ –∑–∞–∫—Ä—ã—Ç–æ–π —à–∫–æ–ª—ã. –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {req.session_state['score']} –∏–∑ 10 –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ—à—ë–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π")
            resp.end()
        else:
            resp.set_text(
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç—ã –æ—Å—Ç–∞–µ—à—å—Å—è –≤ —à–∫–æ–ª–µ. –¢—ã –±—É–¥–µ—à—å —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –¥–æ —Ç–µ—Ö –ø–æ—Ä –ø–æ–∫–∞ –Ω–µ —Ä–µ—à–∏—à—å –≤–µ—Ä–Ω–æ.")
            resp.set_session_state({"stage": 1, "leftRight": False, "think": False, "score": 0})
            resp.set_buttons([{"title": "–ü—Ä–æ–¥–æ–ª–∂–∏–º", "hide": True}, {"title": "–í—ã—Ö–æ–¥", "hide": True}])
        return resp.dictionary

    if req.session_state["stage"] > 1:
        if (req.session_state["leftRight"]):
            try:
                if req.command.lower() in ("–≤–ø—Ä–∞–≤–æ", "–≤–ª–µ–≤–æ"):
                    name = random.choice(list(rooms_variants.keys()))
                    values = rooms_variants[name]
                    description = values[0]
                    fun = values[1]
                    exp, result = fun()

                    resp.set_text(f"–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, —Ç—ã –æ–∫–∞–∑–∞–ª—Å—è –≤ –∫–æ–º–Ω–∞—Ç–µ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{name}'. {description}{exp}")
                    resp.set_session_state(
                        {"stage": req.session_state["stage"], "leftRight": False, "think": True, "waitedResult": result,
                         "score": req.session_state["score"]})
                    resp.set_buttons([{"title": "–û—Ç–≤–µ—Ç–∞ –Ω–µ—Ç", "hide": True}, {"title": "–í—ã—Ö–æ–¥", "hide": True}])
                else:
                    resp.set_session_state(req.session_state)
                    resp.set_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–≤–µ—Ç—å –≤–ø—Ä–∞–≤–æ –∏–ª–∏ –≤–ª–µ–≤–æ")
                    resp.set_buttons([{"title": "–í–ª–µ–≤–æ", "hide": True}, {"title": "–í—ã—Ö–æ–¥", "hide": True},
                                     {"title": "–í–ø—Ä–∞–≤–æ", "hide": True}])

            except Exception as e:
                resp.set_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                resp.end()
                return resp.dictionary

        if (req.session_state["think"]):

            try:
                if (req.original_utterance.lower() != "–æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç"):
                    res = list(map(int,req.original_utterance.replace(" ", "").split(";")))
                else:
                    res = []
            except:
                resp.set_session_state(req.session_state)
                resp.set_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–≤–µ—Ç—å –≤ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞—Ö. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–Ω–∏ —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è –∑–Ω–∞–∫–æ–º ;. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç, —Å–∫–∞–∂–∏ '–æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç'")
                resp.set_buttons([{"title": "–û—Ç–≤–µ—Ç–∞ –Ω–µ—Ç", "hide": True}, {"title": "–í—ã—Ö–æ–¥", "hide": True}])
                return resp.dictionary
            if (sorted(req.session_state["waitedResult"]) == sorted(res)):
                resp.set_text(random.choice(GoodPhrases))
                resp.set_session_state({"stage": req.session_state["stage"] + 1, "leftRight": True, "think": False,
                                        "score": req.session_state["score"] + 1})
                resp.set_buttons([{"title": "–í–ª–µ–≤–æ", "hide": True}, {"title": "–í—ã—Ö–æ–¥", "hide": True},
                                  {"title": "–í–ø—Ä–∞–≤–æ", "hide": True}])

            else:
                waited = req.session_state['waitedResult']
                if len(waited) == 0:
                    text = "–û—Ç–≤–µ—Ç–∞ –Ω–µ—Ç"
                elif len(waited) == 1:
                    text = str(waited[0])
                else:
                    text = ';'.join(map(str,waited))
                resp.set_text(random.choice(BadPhrases) + f" –û—Ç–≤–µ—Ç: {text}")
                resp.set_session_state({"stage": req.session_state["stage"] + 1, "leftRight": True, "think": False,
                                        "score": req.session_state["score"]})
                resp.set_buttons([{"title": "–í–ª–µ–≤–æ", "hide": True}, {"title": "–í—ã—Ö–æ–¥", "hide": True},
                                  {"title": "–í–ø—Ä–∞–≤–æ", "hide": True}])

    return resp.dictionary
